library(diagram)
library(draw)
library(stringr)
# Functions
# ps :: power set
# by Vincent Zoonekynd
ps <- function(set) {
n <- length(set)
masks <- 2^(1:n-1)
lapply( 1:2^n-1, function(u) set[ bitwAnd(u, masks) != 0 ] )
}
# Definitions
data <- 1:3
n_el <- length(data)
n_nodes <- 2^(n_el)
#pos <- coordinates(c(1, 1))
#pos <- coordinates(c(1, 2, 1))
pos <- coordinates(c(1, 3, 3 , 1))
#pos <- coordinates(c(1, 4, 6, 4, 1))
#pos <- coordinates(c(1, 5, 10, 10, 5, 1))
#pos <- coordinates(c(1, 6, 14, 20, 14, 6, 1))
s_data <- paste(unlist(data), collapse='', "")
arrow_matrice <- matrix(FALSE, nrow = n_nodes, ncol = n_nodes)
data_ps <- ps (data)
title = paste("Hasse diagram for Power Set ({", str_sub(s_data, end=-2), "})")
openplotmat(main = title)
# Draw arrows
data_ps <- data_ps[order(sapply(data_ps, length), decreasing = T)]
for (i in 1:n_nodes) {
for (j in 1:n_nodes) {
if (!arrow_matrice[j, i]) {
if (!identical(data_ps[i], data_ps[j])) {
if (length(unlist(data_ps[i])) <= length(unlist(data_ps[j])) + 1 &&
!(length(unlist(data_ps[j])) >  length(unlist(data_ps[i])) + 1)) {
if (length(unlist(data_ps[i])) > 0 && length(unlist(data_ps[j])) > 0) {
contained <- unlist(data_ps[i]) %in% unlist(data_ps[j])
for (k in contained) {
if (!k) {
arrow_matrice[i, j] = FALSE
break
}
else {
arrow_matrice[i, j] = TRUE
}
}
}
else if (!arrow_matrice[j, i] && length(unlist(data_ps[j])) == length(unlist(data_ps[i])) + 1)
arrow_matrice[i, j] = TRUE
}
}
}
}
}
for (i in 1:n_nodes)
for (j in 1:n_nodes)
if (arrow_matrice[j, i])
straightarrow(from = pos[i, ], to = pos[j, ], arr.pos = 1, lcol = "black")
#abline(a=pos[i, ], b=pos[j, ])
# Draw nodes
textround(pos[n_nodes, ], lab = "{ }", radx = 0.02, rady = 0.04,
box.col="grey", shadow.size=0.005, shadow.col = "black", col = "black", family = "bold")
for (i in 2:n_nodes)  {
lab_text <- str_sub(list(paste(unlist(data_ps[n_nodes-i+1]), collapse='', "")), end = -2)
textround(pos[n_nodes-i+1, ], lab = lab_text, cex = 1, radx = 0.0009*str_length(lab_text), rady = 0.04*length(lab_text),
box.col="grey", shadow.size=0.003, shadow.col = "black", col = "black")
}
data_ps
powerset(1:3)
ps(1:3)
power(1:3)
ps(1:3)
library(diagram)
library(draw)
library(stringr)
# Functions
# ps :: power set
# by Vincent Zoonekynd
ps <- function(set) {
n <- length(set)
masks <- 2^(1:n-1)
lapply( 1:2^n-1, function(u) set[ bitwAnd(u, masks) != 0 ] )
}
# Definitions
data <- 1:4
n_el <- length(data)
n_nodes <- 2^(n_el)
#pos <- coordinates(c(1, 1))
#pos <- coordinates(c(1, 2, 1))
#pos <- coordinates(c(1, 3, 3 , 1))
pos <- coordinates(c(1, 4, 6, 4, 1))
#pos <- coordinates(c(1, 5, 10, 10, 5, 1))
#pos <- coordinates(c(1, 6, 14, 20, 14, 6, 1))
s_data <- paste(unlist(data), collapse='', "")
arrow_matrice <- matrix(FALSE, nrow = n_nodes, ncol = n_nodes)
data_ps <- ps (data)
title = paste("Hasse diagram for Power Set ({", str_sub(s_data, end=-2), "})")
openplotmat(main = title)
# Draw arrows
data_ps <- data_ps[order(sapply(data_ps, length), decreasing = T)]
for (i in 1:n_nodes) {
for (j in 1:n_nodes) {
if (!arrow_matrice[j, i]) {
if (!identical(data_ps[i], data_ps[j])) {
if (length(unlist(data_ps[i])) <= length(unlist(data_ps[j])) + 1 &&
!(length(unlist(data_ps[j])) >  length(unlist(data_ps[i])) + 1)) {
if (length(unlist(data_ps[i])) > 0 && length(unlist(data_ps[j])) > 0) {
contained <- unlist(data_ps[i]) %in% unlist(data_ps[j])
for (k in contained) {
if (!k) {
arrow_matrice[i, j] = FALSE
break
}
else {
arrow_matrice[i, j] = TRUE
}
}
}
else if (!arrow_matrice[j, i] && length(unlist(data_ps[j])) == length(unlist(data_ps[i])) + 1)
arrow_matrice[i, j] = TRUE
}
}
}
}
}
for (i in 1:n_nodes)
for (j in 1:n_nodes)
if (arrow_matrice[j, i])
straightarrow(from = pos[i, ], to = pos[j, ], arr.pos = 1, lcol = "black")
#abline(a=pos[i, ], b=pos[j, ])
# Draw nodes
textround(pos[n_nodes, ], lab = "{ }", radx = 0.02, rady = 0.04,
box.col="grey", shadow.size=0.005, shadow.col = "black", col = "black", family = "bold")
for (i in 2:n_nodes)  {
lab_text <- str_sub(list(paste(unlist(data_ps[n_nodes-i+1]), collapse='', "")), end = -2)
textround(pos[n_nodes-i+1, ], lab = lab_text, cex = 1, radx = 0.0009*str_length(lab_text), rady = 0.04*length(lab_text),
box.col="grey", shadow.size=0.003, shadow.col = "black", col = "black")
}
data_Ps
data_ps
x <- 1:6
x
ps(x)
x[order(sapply(x, length), decreasing=T)]
x <- ps(x)
x[order(sapply(x, length), decreasing=T)]
x[order(sapply(x, length), decreasing=F
)]
library(diagram)
library(draw)
library(stringr)
# Functions
# ps :: power set
# by Vincent Zoonekynd
ps <- function(set) {
n <- length(set)
masks <- 2^(1:n-1)
lapply( 1:2^n-1, function(u) set[ bitwAnd(u, masks) != 0 ] )
}
# Definitions
data <- 1:6
n_el <- length(data)
n_nodes <- 2^(n_el)
#pos <- coordinates(c(1, 1))
#pos <- coordinates(c(1, 2, 1))
#pos <- coordinates(c(1, 3, 3 , 1))
#pos <- coordinates(c(1, 4, 6, 4, 1))
#pos <- coordinates(c(1, 5, 10, 10, 5, 1))
pos <- coordinates(c(1, 6, 14, 19, 14, 6, 1))
s_data <- paste(unlist(data), collapse='', "")
arrow_matrice <- matrix(FALSE, nrow = n_nodes, ncol = n_nodes)
data_ps <- ps (data)
title = paste("Hasse diagram for Power Set ({", str_sub(s_data, end=-2), "})")
openplotmat(main = title)
# Draw arrows
data_ps <- data_ps[order(sapply(data_ps, length), decreasing = T)]
for (i in 1:n_nodes) {
for (j in 1:n_nodes) {
if (!arrow_matrice[j, i]) {
if (!identical(data_ps[i], data_ps[j])) {
if (length(unlist(data_ps[i])) <= length(unlist(data_ps[j])) + 1 &&
!(length(unlist(data_ps[j])) >  length(unlist(data_ps[i])) + 1)) {
if (length(unlist(data_ps[i])) > 0 && length(unlist(data_ps[j])) > 0) {
contained <- unlist(data_ps[i]) %in% unlist(data_ps[j])
for (k in contained) {
if (!k) {
arrow_matrice[i, j] = FALSE
break
}
else {
arrow_matrice[i, j] = TRUE
}
}
}
else if (!arrow_matrice[j, i] && length(unlist(data_ps[j])) == length(unlist(data_ps[i])) + 1)
arrow_matrice[i, j] = TRUE
}
}
}
}
}
for (i in 1:n_nodes)
for (j in 1:n_nodes)
if (arrow_matrice[j, i])
straightarrow(from = pos[i, ], to = pos[j, ], arr.pos = 1, lcol = "black")
#abline(a=pos[i, ], b=pos[j, ])
# Draw nodes
textround(pos[n_nodes, ], lab = "{ }", radx = 0.02, rady = 0.04,
box.col="grey", shadow.size=0.005, shadow.col = "black", col = "black", family = "bold")
for (i in 2:n_nodes)  {
lab_text <- str_sub(list(paste(unlist(data_ps[n_nodes-i+1]), collapse='', "")), end = -2)
textround(pos[n_nodes-i+1, ], lab = lab_text, cex = 1, radx = 0.0009*str_length(lab_text), rady = 0.04*length(lab_text),
box.col="grey", shadow.size=0.003, shadow.col = "black", col = "black")
}
library(diagram)
library(draw)
library(stringr)
# Functions
# ps :: power set
# by Vincent Zoonekynd
ps <- function(set) {
n <- length(set)
masks <- 2^(1:n-1)
lapply( 1:2^n-1, function(u) set[ bitwAnd(u, masks) != 0 ] )
}
# Definitions
data <- 1:4
n_el <- length(data)
n_nodes <- 2^(n_el)
#pos <- coordinates(c(1, 1))
#pos <- coordinates(c(1, 2, 1))
#pos <- coordinates(c(1, 3, 3 , 1))
pos <- coordinates(c(1, 4, 6, 4, 1))
#pos <- coordinates(c(1, 5, 10, 10, 5, 1))
#pos <- coordinates(c(1, 6, 14, 19, 14, 6, 1))
s_data <- paste(unlist(data), collapse='', "")
arrow_matrice <- matrix(FALSE, nrow = n_nodes, ncol = n_nodes)
data_ps <- ps (data)
title = paste("Hasse diagram for Power Set ({", str_sub(s_data, end=-2), "})")
openplotmat(main = title)
# Draw arrows
data_ps <- data_ps[order(sapply(data_ps, length), decreasing = T)]
for (i in 1:n_nodes) {
for (j in 1:n_nodes) {
if (!arrow_matrice[j, i]) {
if (!identical(data_ps[i], data_ps[j])) {
if (length(unlist(data_ps[i])) <= length(unlist(data_ps[j])) + 1 &&
!(length(unlist(data_ps[j])) >  length(unlist(data_ps[i])) + 1)) {
if (length(unlist(data_ps[i])) > 0 && length(unlist(data_ps[j])) > 0) {
contained <- unlist(data_ps[i]) %in% unlist(data_ps[j])
for (k in contained) {
if (!k) {
arrow_matrice[i, j] = FALSE
break
}
else {
arrow_matrice[i, j] = TRUE
}
}
}
else if (!arrow_matrice[j, i] && length(unlist(data_ps[j])) == length(unlist(data_ps[i])) + 1)
arrow_matrice[i, j] = TRUE
}
}
}
}
}
for (i in 1:n_nodes)
for (j in 1:n_nodes)
if (arrow_matrice[j, i])
straightarrow(from = pos[i, ], to = pos[j, ], arr.pos = 1, lcol = "black")
#abline(a=pos[i, ], b=pos[j, ])
# Draw nodes
textround(pos[n_nodes, ], lab = "{ }", radx = 0.02, rady = 0.04,
box.col="grey", shadow.size=0.005, shadow.col = "black", col = "black", family = "bold")
for (i in 2:n_nodes)  {
lab_text <- str_sub(list(paste(unlist(data_ps[n_nodes-i+1]), collapse='', "")), end = -2)
textround(pos[n_nodes-i+1, ], lab = lab_text, cex = 1, radx = 0.0009*str_length(lab_text), rady = 0.04*length(lab_text),
box.col="grey", shadow.size=0.003, shadow.col = "black", col = "black")
}
x[order(sapply(x, length), decreasing=T)]
x[order(sapply(x, length), decreasing=F
)]
library(diagram)
library(draw)
library(stringr)
# Functions
# ps :: power set
# by Vincent Zoonekynd
ps <- function(set) {
n <- length(set)
masks <- 2^(1:n-1)
lapply( 1:2^n-1, function(u) set[ bitwAnd(u, masks) != 0 ] )
}
# Definitions
data <- 1:6
n_el <- length(data)
n_nodes <- 2^(n_el)
#pos <- coordinates(c(1, 1))
#pos <- coordinates(c(1, 2, 1))
#pos <- coordinates(c(1, 3, 3 , 1))
#pos <- coordinates(c(1, 4, 6, 4, 1))
#pos <- coordinates(c(1, 5, 10, 10, 5, 1))
pos <- coordinates(c(1, 6, 15, 20, 15, 6, 1))
s_data <- paste(unlist(data), collapse='', "")
arrow_matrice <- matrix(FALSE, nrow = n_nodes, ncol = n_nodes)
data_ps <- ps (data)
title = paste("Hasse diagram for Power Set ({", str_sub(s_data, end=-2), "})")
openplotmat(main = title)
# Draw arrows
data_ps <- data_ps[order(sapply(data_ps, length), decreasing = T)]
for (i in 1:n_nodes) {
for (j in 1:n_nodes) {
if (!arrow_matrice[j, i]) {
if (!identical(data_ps[i], data_ps[j])) {
if (length(unlist(data_ps[i])) <= length(unlist(data_ps[j])) + 1 &&
!(length(unlist(data_ps[j])) >  length(unlist(data_ps[i])) + 1)) {
if (length(unlist(data_ps[i])) > 0 && length(unlist(data_ps[j])) > 0) {
contained <- unlist(data_ps[i]) %in% unlist(data_ps[j])
for (k in contained) {
if (!k) {
arrow_matrice[i, j] = FALSE
break
}
else {
arrow_matrice[i, j] = TRUE
}
}
}
else if (!arrow_matrice[j, i] && length(unlist(data_ps[j])) == length(unlist(data_ps[i])) + 1)
arrow_matrice[i, j] = TRUE
}
}
}
}
}
for (i in 1:n_nodes)
for (j in 1:n_nodes)
if (arrow_matrice[j, i])
straightarrow(from = pos[i, ], to = pos[j, ], arr.pos = 1, lcol = "black")
#abline(a=pos[i, ], b=pos[j, ])
# Draw nodes
textround(pos[n_nodes, ], lab = "{ }", radx = 0.02, rady = 0.04,
box.col="grey", shadow.size=0.005, shadow.col = "black", col = "black", family = "bold")
for (i in 2:n_nodes)  {
lab_text <- str_sub(list(paste(unlist(data_ps[n_nodes-i+1]), collapse='', "")), end = -2)
textround(pos[n_nodes-i+1, ], lab = lab_text, cex = 1, radx = 0.0009*str_length(lab_text), rady = 0.04*length(lab_text),
box.col="grey", shadow.size=0.003, shadow.col = "black", col = "black")
}
library(diagram)
library(draw)
library(stringr)
# Functions
# ps :: power set
# by Vincent Zoonekynd
ps <- function(set) {
n <- length(set)
masks <- 2^(1:n-1)
lapply( 1:2^n-1, function(u) set[ bitwAnd(u, masks) != 0 ] )
}
# Definitions
data <- 1:5
n_el <- length(data)
n_nodes <- 2^(n_el)
#pos <- coordinates(c(1, 1))
#pos <- coordinates(c(1, 2, 1))
#pos <- coordinates(c(1, 3, 3 , 1))
#pos <- coordinates(c(1, 4, 6, 4, 1))
pos <- coordinates(c(1, 5, 10, 10, 5, 1))
#pos <- coordinates(c(1, 6, 15, 20, 15, 6, 1))
s_data <- paste(unlist(data), collapse='', "")
arrow_matrice <- matrix(FALSE, nrow = n_nodes, ncol = n_nodes)
data_ps <- ps (data)
title = paste("Hasse diagram for Power Set ({", str_sub(s_data, end=-2), "})")
openplotmat(main = title)
# Draw arrows
data_ps <- data_ps[order(sapply(data_ps, length), decreasing = T)]
for (i in 1:n_nodes) {
for (j in 1:n_nodes) {
if (!arrow_matrice[j, i]) {
if (!identical(data_ps[i], data_ps[j])) {
if (length(unlist(data_ps[i])) <= length(unlist(data_ps[j])) + 1 &&
!(length(unlist(data_ps[j])) >  length(unlist(data_ps[i])) + 1)) {
if (length(unlist(data_ps[i])) > 0 && length(unlist(data_ps[j])) > 0) {
contained <- unlist(data_ps[i]) %in% unlist(data_ps[j])
for (k in contained) {
if (!k) {
arrow_matrice[i, j] = FALSE
break
}
else {
arrow_matrice[i, j] = TRUE
}
}
}
else if (!arrow_matrice[j, i] && length(unlist(data_ps[j])) == length(unlist(data_ps[i])) + 1)
arrow_matrice[i, j] = TRUE
}
}
}
}
}
for (i in 1:n_nodes)
for (j in 1:n_nodes)
if (arrow_matrice[j, i])
straightarrow(from = pos[i, ], to = pos[j, ], arr.pos = 1, lcol = "black")
#abline(a=pos[i, ], b=pos[j, ])
# Draw nodes
textround(pos[n_nodes, ], lab = "{ }", radx = 0.02, rady = 0.04,
box.col="grey", shadow.size=0.005, shadow.col = "black", col = "black", family = "bold")
for (i in 2:n_nodes)  {
lab_text <- str_sub(list(paste(unlist(data_ps[n_nodes-i+1]), collapse='', "")), end = -2)
textround(pos[n_nodes-i+1, ], lab = lab_text, cex = 1, radx = 0.0009*str_length(lab_text), rady = 0.04*length(lab_text),
box.col="grey", shadow.size=0.003, shadow.col = "black", col = "black")
}
library(diagram)
library(draw)
library(stringr)
# Functions
# ps :: power set
# by Vincent Zoonekynd
ps <- function(set) {
n <- length(set)
masks <- 2^(1:n-1)
lapply( 1:2^n-1, function(u) set[ bitwAnd(u, masks) != 0 ] )
}
# Definitions
data <- 1:4
n_el <- length(data)
n_nodes <- 2^(n_el)
#pos <- coordinates(c(1, 1))
#pos <- coordinates(c(1, 2, 1))
#pos <- coordinates(c(1, 3, 3 , 1))
pos <- coordinates(c(1, 4, 6, 4, 1))
#pos <- coordinates(c(1, 5, 10, 10, 5, 1))
#pos <- coordinates(c(1, 6, 15, 20, 15, 6, 1))
s_data <- paste(unlist(data), collapse='', "")
arrow_matrice <- matrix(FALSE, nrow = n_nodes, ncol = n_nodes)
data_ps <- ps (data)
title = paste("Hasse diagram for Power Set ({", str_sub(s_data, end=-2), "})")
openplotmat(main = title)
# Draw arrows
data_ps <- data_ps[order(sapply(data_ps, length), decreasing = T)]
for (i in 1:n_nodes) {
for (j in 1:n_nodes) {
if (!arrow_matrice[j, i]) {
if (!identical(data_ps[i], data_ps[j])) {
if (length(unlist(data_ps[i])) <= length(unlist(data_ps[j])) + 1 &&
!(length(unlist(data_ps[j])) >  length(unlist(data_ps[i])) + 1)) {
if (length(unlist(data_ps[i])) > 0 && length(unlist(data_ps[j])) > 0) {
contained <- unlist(data_ps[i]) %in% unlist(data_ps[j])
for (k in contained) {
if (!k) {
arrow_matrice[i, j] = FALSE
break
}
else {
arrow_matrice[i, j] = TRUE
}
}
}
else if (!arrow_matrice[j, i] && length(unlist(data_ps[j])) == length(unlist(data_ps[i])) + 1)
arrow_matrice[i, j] = TRUE
}
}
}
}
}
for (i in 1:n_nodes)
for (j in 1:n_nodes)
if (arrow_matrice[j, i])
straightarrow(from = pos[i, ], to = pos[j, ], arr.pos = 1, lcol = "black")
#abline(a=pos[i, ], b=pos[j, ])
# Draw nodes
textround(pos[n_nodes, ], lab = "{ }", radx = 0.02, rady = 0.04,
box.col="grey", shadow.size=0.005, shadow.col = "black", col = "black", family = "bold")
for (i in 2:n_nodes)  {
lab_text <- str_sub(list(paste(unlist(data_ps[n_nodes-i+1]), collapse='', "")), end = -2)
textround(pos[n_nodes-i+1, ], lab = lab_text, cex = 1, radx = 0.0009*str_length(lab_text), rady = 0.04*length(lab_text),
box.col="grey", shadow.size=0.003, shadow.col = "black", col = "black")
}
